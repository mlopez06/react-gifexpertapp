{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","category","type","onChange","target","propsType","PropTypes","func","isRequired","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEpBC,mBAAS,IAFW,mBAEvCC,EAFuC,KAEhCC,EAFgC,KAiB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAMK,OAAOC,OAAS,IACrBR,GAAc,SAAAS,GAAQ,OAAMP,GAAN,mBAAgBO,OACtCN,EAAS,MAKb,SACI,uBACIO,KAAO,OACPR,MAAUA,EACVS,SAlBc,SAACN,GACvBF,EAASE,EAAEO,OAAOV,aAuB1BH,EAAYc,UAAY,CACpBb,c,OAAec,EAAUC,KAAKC,Y,mCChCrBC,EAAO,uCAAG,WAAOR,GAAP,uBAAAS,EAAA,6DACbC,EADa,iDACoCC,UAAUX,GAD9C,+DAEAY,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,qBAAKc,UAAY,yCAAjB,SACI,qBAAKC,IAAOf,EAAKgB,IAAON,OCDvBO,EAAU,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAGTqB,ECLW,SAAErB,GAAe,IAAD,EACdR,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAW,WACPvB,EAAQR,GAAUgC,MAAM,SAAAX,GACpBS,EAAS,CACLf,KAAMM,EACNO,SAAS,UAKdC,EDViBI,CAAcjC,GAA9Be,KAQR,OACI,qCACI,mCAAOf,EAAP,OACA,qBAAKwB,UAAY,YAAjB,SAEQH,EAAOJ,KAAK,SAACiB,GACT,OAAO,cAAC,EAAD,eAEEA,GADEA,EAAMf,aEU1BgB,EA7BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,cAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAAAjB,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MChBpCqC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.19f6f9e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleChangeValue = (e) => {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //Cuando solo obtenemos la función del setState, pordemos obtener el valor con la siguiente línea\r\n        if(value.trim().length > 2) {\r\n            setCategories(category => [ value, ...category ]);\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type = \"text\"\r\n                value = { value }\r\n                onChange = { handleChangeValue }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propsType = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=lGGAZFZ59YccdBG0EBYlgo8fdREh84S5`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    return (\r\n        <div className = 'card animate__animated animate__zoomIn'>\r\n            <img src = {url} alt = {title}></img>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n    const { data:images } = useFetchGifs( category );\r\n\r\n    /*// useEffect con un arreglo vacio como segundo parámetro significa que se ejecutará su cuerpo cuando el componente es renderizado por primera vez. \r\n    useEffect( () => {\r\n        //getGifs(category).then(images => setImages(images));\r\n        getGifs(category).then(setImages);\r\n    }, [ category ]);*/\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            <div className = 'card-grid'>\r\n                {\r\n                    images.map( (image) => {\r\n                        return <GifGridItem\r\n                            key = {image.id} \r\n                            { ...image }\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then( images => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            })\r\n        });\r\n    });\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Samurai X']);\r\n\r\n    /*const handleAddBtn = () => {\r\n        setCategories([...categories, 'Naruto']);\r\n        //setCategories(categories => [...categories, 'Naruto']);\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid\r\n                            key = { category } \r\n                            category = { category } \r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}